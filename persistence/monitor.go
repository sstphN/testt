// persistence/monitor.go
package persistence

import (
	"context"
	"fmt"
	"log"
	"math"
	"sync"
	"time"

	"1233/internal/bots"
	"1233/internal/exchanges/binance"

	"github.com/adshao/go-binance/v2/futures"
)

type OIRecord struct {
	Timestamp time.Time
	OI        float64
}

type UserOITracking struct {
	Symbols map[string]*SymbolOITracking
	Mu      sync.Mutex
}

type SymbolOITracking struct {
	Records       []OIRecord
	LastAlertTime time.Time // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
}

var userOITrackings = make(map[int64]*UserOITracking)
var uOTMu sync.Mutex

const alertCooldown = 5 * time.Minute // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
func hasSignificantChange(current, previous, threshold float64) bool {
	if previous == 0 {
		return false // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
	}
	change := math.Abs((current - previous) / previous * 100)
	return change >= threshold
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
func (s *SymbolOITracking) shouldSendAlert() bool {
	if time.Since(s.LastAlertTime) > alertCooldown {
		s.LastAlertTime = time.Now()
		return true
	}
	return false
}

func StartMonitoring(ctx context.Context, userID int64, s bots.UserSettings, symbols []string, sendFunc func(int64, string), c *futures.Client) {
	ticker := time.NewTicker(time.Minute)
	defer ticker.Stop()

	uOTMu.Lock()
	if _, exists := userOITrackings[userID]; !exists {
		userOITrackings[userID] = &UserOITracking{
			Symbols: make(map[string]*SymbolOITracking),
		}
		for _, sym := range symbols {
			currentOI, err := binance.GetOpenInterest(c, sym)
			if err != nil {
				log.Printf("[User %d] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OI –¥–ª—è %s: %v", userID, sym, err)
				continue
			}
			userOITrackings[userID].Symbols[sym] = &SymbolOITracking{
				Records: []OIRecord{
					{
						Timestamp: time.Now(),
						OI:        currentOI,
					},
				},
				LastAlertTime: time.Time{}, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
			}
			log.Printf("[User %d] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ OI –¥–ª—è %s: %.2f", userID, sym, currentOI)
		}
		log.Printf("[User %d] –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ OI –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: %v", userID, symbols)
	}
	uOTMu.Unlock()

	for {
		select {
		case <-ctx.Done():
			log.Printf("[User %d] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", userID)
			return
		case <-ticker.C:
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Scalp Mode)
			if s.TimeFrame != "" && s.ChangeThreshold > 0 {
				for _, sym := range symbols {
					prevClose, currClose, err := binance.GetChangePercent(c, ctx, sym, s.TimeFrame)
					if err != nil {
						log.Printf("[User %d] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è %s: %v", userID, sym, err)
						continue
					}
					cp := ((currClose - prevClose) / prevClose) * 100
					if math.Abs(cp) >= s.ChangeThreshold {
						d := "üü• Dump"
						if cp > 0 {
							d = "üü© Pump"
						}
						msg := fmt.Sprintf("%s: %s\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: %.2f%%\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.4f USDT", d, sym, cp, currClose)
						log.Printf("[User %d] –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ –¥–ª—è %s: %.2f%%", userID, sym, cp)
						sendFunc(userID, msg)
					}
				}
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è OI
			if s.MonitorOI && s.OIThreshold > 0 {
				uOTMu.Lock()
				tracking, exists := userOITrackings[userID]
				if !exists {
					tracking = &UserOITracking{
						Symbols: make(map[string]*SymbolOITracking),
					}
					for _, sym := range symbols {
						tracking.Symbols[sym] = &SymbolOITracking{
							Records:       []OIRecord{},
							LastAlertTime: time.Time{},
						}
					}
					userOITrackings[userID] = tracking
					log.Printf("[User %d] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ OI –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: %v", userID, symbols)
				}
				uOTMu.Unlock()

				for _, sym := range symbols {
					currentOI, err := binance.GetOpenInterest(c, sym)
					if err != nil {
						log.Printf("[User %d] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OI –¥–ª—è %s: %v", userID, sym, err)
						continue
					}

					tracking.Mu.Lock()
					sTracking, ok := tracking.Symbols[sym]
					if !ok {
						sTracking = &SymbolOITracking{
							Records:       []OIRecord{},
							LastAlertTime: time.Time{},
						}
						tracking.Symbols[sym] = sTracking
						log.Printf("[User %d] –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫–∏–Ω–≥ OI –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: %s", userID, sym)
					}

					now := time.Now()
					sTracking.Records = append(sTracking.Records, OIRecord{
						Timestamp: now,
						OI:        currentOI,
					})

					// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
					cutoff := now.Add(-30 * time.Minute)
					var filtered []OIRecord
					for _, rec := range sTracking.Records {
						if rec.Timestamp.After(cutoff) {
							filtered = append(filtered, rec)
						}
					}
					sTracking.Records = filtered

					var oi15m, oi30m float64
					for _, rec := range sTracking.Records {
						// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫, –¥–æ–ø—É—Å–∫–∞—é—â–∏–π –Ω–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
						if rec.Timestamp.Before(now.Add(-15*time.Minute)) && rec.Timestamp.After(now.Add(-16*time.Minute)) {
							oi15m = rec.OI
						}
						if rec.Timestamp.Before(now.Add(-30*time.Minute)) && rec.Timestamp.After(now.Add(-31*time.Minute)) {
							oi30m = rec.OI
						}
					}
					tracking.Mu.Unlock()

					// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 15 –∏–ª–∏ 30 –º–∏–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
					if oi15m == 0 && oi30m == 0 {
						continue
					}

					var shouldAlert bool
					var msg string

					if oi15m != 0 && hasSignificantChange(currentOI, oi15m, s.OIThreshold) {
						if sTracking.shouldSendAlert() {
							change15m := ((currentOI - oi15m) / oi15m) * 100
							msg += fmt.Sprintf("OI Change (15m): %.2f%%\n", change15m)
							shouldAlert = true
						}
					}

					if oi30m != 0 && hasSignificantChange(currentOI, oi30m, s.OIThreshold) {
						if sTracking.shouldSendAlert() {
							change30m := ((currentOI - oi30m) / oi30m) * 100
							msg += fmt.Sprintf("OI Change (30m): %.2f%%\n", change30m)
							shouldAlert = true
						}
					}

					if shouldAlert {
						price, err := binance.GetCurrentPrice(c, sym)
						if err != nil {
							log.Printf("[User %d] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è %s: %v", userID, sym, err)
							continue
						}
						finalMsg := fmt.Sprintf("üé∞ OI Alert\n`%s` Binance\n%s–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.5f USDT", sym, msg, price)
						log.Printf("[User %d] –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ OI –¥–ª—è %s", userID, sym)
						sendFunc(userID, finalMsg)
					}
				}
			}
		}
	}
}
