// internal/bots/bot.go
package bots

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserSettings struct {
	ChangeThreshold float64 `json:"change_threshold"`
	TimeFrame       string  `json:"time_frame"`
	TargetBot       string  `json:"target_bot"`
	MonitorOI       bool    `json:"monitor_oi"`
	OIThreshold     float64 `json:"oi_threshold"`
}

type OnSettingsChangeFunc func(userID int64, s UserSettings)

type userSession struct {
	MessageID int
	ChatID    int64
	States    []string
}

type Bot struct {
	BotAPI       *tgbotapi.BotAPI
	Users        map[int64]*UserSettings
	Mu           sync.Mutex
	OnSettingsFn OnSettingsChangeFunc
	ManagerRef   *BotManager
	UserSessions map[int64]*userSession
}

func NewBot(token string) (*Bot, error) {
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}
	return &Bot{
		BotAPI:       botAPI,
		Users:        make(map[int64]*UserSettings),
		UserSessions: make(map[int64]*userSession),
	}, nil
}

func (b *Bot) HandleUpdate(update tgbotapi.Update) {
	if update.Message.IsCommand() && update.Message.Command() == "start" {
		if args := strings.TrimSpace(update.Message.CommandArguments()); args != "" {
			log.Printf("User %d passed parameters: %s", update.Message.Chat.ID, args)
			// –ü–∞—Ä—Å–∏–Ω–≥ args –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		}
	}
	if update.Message != nil && update.Message.IsCommand() {
		switch strings.ToLower(update.Message.Command()) {
		case "start":
			b.startCommand(update.Message.Chat.ID, update.Message.From.FirstName)
		case "help":
			b.sendHelp(update.Message.Chat.ID)
		default:
			b.sendUnknown(update.Message.Chat.ID)
		}
	} else if update.Message != nil {
		b.sendUnknown(update.Message.Chat.ID)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
	}
}

func (b *Bot) startCommand(chatID int64, firstName string) {
	msgText := fmt.Sprintf("üöÄ –ü—Ä–∏–≤–µ—Ç, %s! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", firstName)
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞", "to:description"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ö†Ô∏è –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "to:disclaimer"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöÄ –ü–æ–µ—Ö–∞–ª–∏", "to:choose_main_mode"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ReplyMarkup = btn
	sentMsg, err := b.BotAPI.Send(msg)
	if err != nil {
		log.Printf("Error sending start message to %d: %v", chatID, err)
		return
	}

	b.UserSessions[chatID] = &userSession{
		ChatID:    chatID,
		MessageID: sentMsg.MessageID,
		States:    []string{"welcome"},
	}
	log.Printf("User %d started the setup", chatID)
}

func (b *Bot) sendHelp(chatID int64) {
	helpText := "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:*\n\n" +
		"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π\n\n" +
		"–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (OI) –Ω–∞ —Ñ—å—é—á–µ—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ Binance.\n" +
		"–î–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–∂–∏–º—ã Scalp, Intraday –∏ Spot."
	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "Markdown"
	if _, err := b.BotAPI.Send(msg); err != nil {
		log.Printf("Error sending help to %d: %v", chatID, err)
	}
}

func (b *Bot) sendUnknown(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /help.")
	if _, err := b.BotAPI.Send(msg); err != nil {
		log.Printf("Error sending unknown command message to %d: %v", chatID, err)
	}
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	sess, ok := b.UserSessions[chatID]
	if !ok {
		b.BotAPI.Request(tgbotapi.NewCallback(callback.ID, ""))
		return
	}

	b.Mu.Lock()
	defer b.Mu.Unlock()

	log.Printf("User %d pressed button: %s", chatID, data)

	switch {
	case data == "back":
		b.popState(chatID)
		b.renderState(chatID)
	case data == "back_to_start":
		b.UserSessions[chatID].States = []string{"welcome"}
		b.Users[chatID] = &UserSettings{}
		b.renderState(chatID)
	case data == "to:description":
		b.showDescription(chatID)
	case data == "to:disclaimer":
		b.showDisclaimer(chatID)
	case data == "to:choose_main_mode":
		b.pushState(chatID, "choose_main_mode")
		b.renderState(chatID)
	case strings.HasPrefix(data, "to:"):
		newState := strings.TrimPrefix(data, "to:")
		b.pushState(chatID, newState)
		b.renderState(chatID)
	case strings.HasPrefix(data, "set_change:"):
		v := strings.TrimPrefix(data, "set_change:")
		th, err := strconv.ParseFloat(v, 64)
		if err != nil {
			b.editError(chatID, sess)
			b.BotAPI.Request(tgbotapi.NewCallback(callback.ID, ""))
			return
		}
		if _, exists := b.Users[chatID]; !exists {
			b.Users[chatID] = &UserSettings{}
		}
		b.Users[chatID].ChangeThreshold = th
		currentState := b.currentState(chatID)
		if currentState == "pumps_dumps" {
			b.pushState(chatID, "choose_timeframe")
		}
		b.renderState(chatID)
	case strings.HasPrefix(data, "set_time:"):
		tf := strings.TrimPrefix(data, "set_time:")
		if _, exists := b.Users[chatID]; !exists {
			b.Users[chatID] = &UserSettings{}
		}
		b.Users[chatID].TimeFrame = tf
		b.pushState(chatID, "choose_target_bot")
		b.renderState(chatID)
	case strings.HasPrefix(data, "target:"):
		bn := strings.TrimPrefix(data, "target:")
		if _, exists := b.Users[chatID]; !exists {
			b.Users[chatID] = &UserSettings{}
		}
		b.Users[chatID].TargetBot = bn
		if b.OnSettingsFn != nil {
			b.OnSettingsFn(chatID, *b.Users[chatID])
		}
		b.pushState(chatID, "final")
		b.renderState(chatID)
	case strings.HasPrefix(data, "set_oi_threshold:"):
		v := strings.TrimPrefix(data, "set_oi_threshold:")
		oiTh, err := strconv.ParseFloat(v, 64)
		if err != nil {
			b.editError(chatID, sess)
			b.BotAPI.Request(tgbotapi.NewCallback(callback.ID, ""))
			return
		}
		if _, exists := b.Users[chatID]; !exists {
			b.Users[chatID] = &UserSettings{}
		}
		b.Users[chatID].MonitorOI = true
		b.Users[chatID].OIThreshold = oiTh
		b.pushState(chatID, "choose_target_bot")
		b.renderState(chatID)
	case strings.HasPrefix(data, "set_pd:"):
		parts := strings.Split(strings.TrimPrefix(data, "set_pd:"), ":")
		if len(parts) != 2 {
			b.editError(chatID, sess)
			b.BotAPI.Request(tgbotapi.NewCallback(callback.ID, ""))
			return
		}
		pdPercent, err1 := strconv.ParseFloat(parts[0], 64)
		pdMinutes, err2 := strconv.Atoi(parts[1])
		if err1 != nil || err2 != nil {
			b.editError(chatID, sess)
			b.BotAPI.Request(tgbotapi.NewCallback(callback.ID, ""))
			return
		}
		if _, exists := b.Users[chatID]; !exists {
			b.Users[chatID] = &UserSettings{}
		}
		b.Users[chatID].ChangeThreshold = pdPercent
		b.Users[chatID].TimeFrame = fmt.Sprintf("%dm", pdMinutes)
		b.pushState(chatID, "choose_target_bot")
		b.renderState(chatID)
	default:
		log.Printf("Unknown callback data from user %d: %s", chatID, data)
		b.sendUnknown(chatID)
	}

	b.BotAPI.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func (b *Bot) pushState(chatID int64, st string) {
	sess := b.UserSessions[chatID]
	sess.States = append(sess.States, st)
}

func (b *Bot) popState(chatID int64) {
	sess := b.UserSessions[chatID]
	if len(sess.States) > 1 {
		sess.States = sess.States[:len(sess.States)-1]
	}
}

func (b *Bot) currentState(chatID int64) string {
	sess := b.UserSessions[chatID]
	return sess.States[len(sess.States)-1]
}

func (b *Bot) renderState(chatID int64) {
	sess := b.UserSessions[chatID]
	state := b.currentState(chatID)

	var text string
	var btn tgbotapi.InlineKeyboardMarkup

	switch state {
	case "welcome":
		text = "üöÄ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞", "to:description"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ö†Ô∏è –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "to:disclaimer"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üöÄ –ü–æ–µ—Ö–∞–ª–∏", "to:choose_main_mode"),
			),
		)
	case "description":
		text = "üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:*\n\n[–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å](https://t.me/your_telegraph_link)"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "disclaimer":
		text = "‚ö†Ô∏è *–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:*\n\n[–í–∞—à —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "choose_main_mode":
		text = "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ö° Scalp Mode", "to:scalp_mode"),
				tgbotapi.NewInlineKeyboardButtonData("‚è± Intraday", "to:intraday_mode"),
				tgbotapi.NewInlineKeyboardButtonData("üí∞ Spot Mode", "to:spot_mode"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "scalp_mode":
		text = "üîß Scalp Mode –≤—ã–±—Ä–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìà Pumps/Dumps", "to:pumps_dumps"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "pumps_dumps":
		text = "üìâ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (%):"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 2%", "set_change:2"),
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 2.5%", "set_change:2.5"),
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 3%", "set_change:3"),
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 5%", "set_change:5"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "choose_timeframe":
		text = "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è± 1m", "set_time:1m"),
				tgbotapi.NewInlineKeyboardButtonData("‚è± 3m", "set_time:3m"),
				tgbotapi.NewInlineKeyboardButtonData("‚è± 5m", "set_time:5m"),
				tgbotapi.NewInlineKeyboardButtonData("‚è± 15m", "set_time:15m"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "intraday_mode":
		text = "‚è± Intraday Mode –≤—ã–±—Ä–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ OI", "to:intraday_oi"),
				tgbotapi.NewInlineKeyboardButtonData("üìà Pumps/Dumps", "to:intraday_pumps_dumps"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "intraday_oi":
		text = "üìä –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è OI (%):"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 2.5%", "set_oi_threshold:2.5"),
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 5%", "set_oi_threshold:5"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "intraday_pumps_dumps":
		text = "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä Pumps/Dumps:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 5% / 15m", "set_pd:5:15"),
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ 10% / 30m", "set_pd:10:30"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
			),
		)
	case "choose_target_bot":
		text = "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíπ Bot1", "target:bot1"),
				tgbotapi.NewInlineKeyboardButtonData("üíπ Bot2", "target:bot2"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíπ Bot3", "target:bot3"),
				tgbotapi.NewInlineKeyboardButtonData("üíπ Bot4", "target:bot4"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "choose_main_mode"),
			),
		)
	case "final":
		s := b.Users[chatID]
		botUsername, ok := b.ManagerRef.Usernames[s.TargetBot]
		if !ok || botUsername == "" {
			botUsername = "gmscreener1_bot" // Default username, –∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		}
		link := fmt.Sprintf("https://t.me/%s", botUsername)
		text = fmt.Sprintf("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞: [t.me/%s](%s)", botUsername, link)
		btn = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", link),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "back_to_start"),
			),
		)
	default:
		text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
		btn = tgbotapi.NewInlineKeyboardMarkup()
	}

	edit := tgbotapi.NewEditMessageTextAndMarkup(sess.ChatID, sess.MessageID, text, btn)
	edit.ParseMode = "Markdown"
	if _, err := b.BotAPI.Send(edit); err != nil {
		log.Printf("Error editing message for user %d: %v", chatID, err)
	}
}

func (b *Bot) showDescription(chatID int64) {
	text := "üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:*\n\n[–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å](https://t.me/your_telegraph_link)"
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
		),
	)
	edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, b.UserSessions[chatID].MessageID, text, btn)
	edit.ParseMode = "Markdown"
	if _, err := b.BotAPI.Send(edit); err != nil {
		log.Printf("Error editing description message for user %d: %v", chatID, err)
	}
}

func (b *Bot) showDisclaimer(chatID int64) {
	text := "‚ö†Ô∏è *–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:*\n\n[–í–∞—à —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]"
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
		),
	)
	edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, b.UserSessions[chatID].MessageID, text, btn)
	edit.ParseMode = "Markdown"
	if _, err := b.BotAPI.Send(edit); err != nil {
		log.Printf("Error editing disclaimer message for user %d: %v", chatID, err)
	}
}

func (b *Bot) editError(chatID int64, sess *userSession) {
	text := "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back"),
		),
	)
	edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, sess.MessageID, text, btn)
	edit.ParseMode = "Markdown"
	if _, err := b.BotAPI.Send(edit); err != nil {
		log.Printf("Error editing error message for user %d: %v", chatID, err)
	}
}
